# """
# Django settings for issue_tracker_backend project.

# Generated by 'django-admin startproject' using Django 5.2.4.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.2/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.2/ref/settings/
# """

# from pathlib import Path
# from datetime import timedelta
# import os # NEW: Import the os module
# from decouple import config # NEW: Import config from python-decouple
# import dj_database_url # NEW: Import dj_database_url

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# # MODIFIED: Load SECRET_KEY from environment variable for production
# SECRET_KEY = config('SECRET_KEY', default='django-insecure-s3qna+j6&!r%hog+96-!)fahtebtb093s502u%a%6i!5_s&#i8') # Fallback for local dev


# # SECURITY WARNING: don't run with debug turned on in production!
# # MODIFIED: Load DEBUG from env, default True for local
# DEBUG = config('DEBUG', default=True, cast=bool)

# ALLOWED_HOSTS = [".vercel.app","issue-tracker-s3ys.onrender.com",'localhost']

# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



# # Application definition

# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'rest_framework',
#     'djoser',
#     'rest_framework_simplejwt',
#     'corsheaders',
#     # NEW: Add Whitenoise for static file serving in production
#     'whitenoise.runserver_nostatic', # For local dev serving static files with Whitenoise
#     'issues.apps.IssuesConfig'
# ]

# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     # NEW: Add Whitenoise middleware - MUST be right after SecurityMiddleware
#     'whitenoise.middleware.WhiteNoiseMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'corsheaders.middleware.CorsMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]

# ROOT_URLCONF = 'issue_tracker_backend.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug', # NEW: Recommended for context
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = 'issue_tracker_backend.wsgi.application'


# # Database
# # https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# # MODIFIED: Use Render's DATABASE_URL env var for production
# DATABASES = {
#     'default': dj_database_url.config(
#         default=f'postgresql://issue_tracker_db_xysk_user:GxBrsuP1qXg6gge5UNsZBTdOpVZAXm6y@dpg-d24chpqli9vc73cklr8g-a.oregon-postgres.render.com/issue_tracker_db_xysk', # Local DB URL
#         conn_max_age=600 # Optional: Reconnect after 10 mins idle
#     )
# }


# # Password validation
# # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# # Internationalization
# # https://docs.djangoproject.com/en/5.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

# USE_I18N = True

# USE_TZ = True


# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC_URL = 'static/'
# STATIC_ROOT = BASE_DIR / 'staticfiles'
# # NEW: Configure Whitenoise to use compressed and hashed static files in production
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# # Default primary key field type
# # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# # CONSOLIDATED: Removed duplicate REST_FRAMEWORK block
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#         'rest_framework.authentication.SessionAuthentication', # Recommended for browsable API
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated', # Default to require authentication for all views
#     ),
#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
#     'PAGE_SIZE': 10, # Optional: For pagination on lists
# }

# DJOSER = {
#     'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
#     'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}',
#     'ACTIVATION_URL': '#/activate/{uid}/{token}',
#     'SEND_ACTIVATION_EMAIL': False, # Set to True if you want email activation
#     'SEND_CONFIRMATION_EMAIL': False, # Set to True if you want confirmation email
#     'USER_ID_FIELD': 'username', # Djoser uses this field for internal user ID representation
#     'LOGIN_FIELD': 'username', # IMPORTANT: Users will log in with their username and password
#     'PERMISSIONS': { # Optional: Override Djoser's default permissions if needed
#         'user_list': ['rest_framework.permissions.IsAdminUser'], # Only admins can list all users
#         'user_detail': ['rest_framework.permissions.IsAuthenticated'], # Authenticated users can see their own details
#     },
#     'SERIALIZERS': {
#         'current_user': 'issues.serializers.CustomCurrentUserSerializer',
#     },
# }

# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Access token validity (1 hour)
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=7),# Refresh token validity (7 days)
#     'ROTATE_REFRESH_TOKENS': True, # New refresh token is issued with each refresh request
#     'BLACKLIST_AFTER_ROTATION': True, # Old refresh tokens are blacklisted
#     'UPDATE_LAST_LOGIN': True, # Update last_login field on user model
#     'ALGORITHM': 'HS256',
#     'SIGNING_KEY': SECRET_KEY, # Uses Django's SECRET_KEY for signing
#     'VERIFYING_KEY': None,
#     'AUDIENCE': None,
#     'ISSUER': None,
#     'JWK_URL': None,
#     'LEEWAY': 0,

#     'AUTH_HEADER_TYPES': ('Bearer',), # Expects 'Bearer <token>' in Authorization header
#     'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
#     'USER_ID_FIELD': 'id', # The field on the User model used for the JWT user ID claim
#     'USER_ID_CLAIM': 'user_id',
#     'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

#     'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
#     'TOKEN_TYPE_CLAIM': 'token_type',
#     'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

#     'JTI_CLAIM': 'jti', # JWT ID claim

#     'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
#     'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
#     'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
# }


# # --- CORS HEADERS SETTINGS ---
# CORS_ALLOW_ALL_ORIGINS = False
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173", # Common for Vite (for local dev)
#     'https://issue-tracker-chi-swart.vercel.app'
#     # NEW: Add your frontend's Render URL here for production
#     # Example: "https://your-frontend-app.onrender.com"
#     # Make sure it uses HTTPS in production
# ]
# CORS_ALLOW_CREDENTIALS = True
# CSRF_TRUSTED_ORIGINS = [
#     "https://issue-tracker-chi-swart.vercel.app",
# ]

# CORS_ALLOW_HEADERS = [
#     'accept',
#     'accept-encoding',
#     'authorization',
#     'content-type',
#     'dnt',
#     'origin',
#     'user-agent',
#     'x-csrftoken',
#     'x-requested-with',
# ]

from pathlib import Path
from datetime import timedelta
import os
from decouple import config
import dj_database_url

BASE_DIR = Path(__file__).resolve().parent.parent

# Secret key & debug
SECRET_KEY = config('SECRET_KEY', default='django-insecure-s3qna+j6&!r%hog+96-!)fahtebtb093s502u%a%6i!5_s&#i8')
DEBUG = config('DEBUG', default=True, cast=bool)

# Allowed hosts
ALLOWED_HOSTS = [
    ".vercel.app",
    "issue-tracker-q9v4.onrender.com",
    "localhost",
    "127.0.0.1",
]

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Installed apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'djoser',
    'rest_framework_simplejwt',
    'corsheaders',
    'whitenoise.runserver_nostatic',
    'issues.apps.IssuesConfig',
   
]



# Middleware
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'issue_tracker_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'issue_tracker_backend.wsgi.application'

# Database configuration
DATABASES = {
    'default': dj_database_url.config(
        default='postgresql://issue_tracker_db_xysk_user:GxBrsuP1qXg6gge5UNsZBTdOpVZAXm6y@dpg-d24chpqli9vc73cklr8g-a.oregon-postgres.render.com/issue_tracker_db_xysk',
        conn_max_age=600
    )
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# Djoser settings
#    'USER_CREATE_SERIALIZER': 'issues.serializers.CustomUserCreateSerializer',

DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': '#/activate/{uid}/{token}',
    
    'SEND_CONFIRMATION_EMAIL': False,
    'USER_ID_FIELD': 'username',
    'LOGIN_FIELD': 'username',
    'PERMISSIONS': {
        'user_list': ['rest_framework.permissions.IsAdminUser'],
        'user_detail': ['rest_framework.permissions.IsAuthenticated'],
    },
    'SERIALIZERS': {
        'user_create': 'issues.serializers.CustomUserCreateSerializer',
        'current_user': 'issues.serializers.CustomCurrentUserSerializer',
    },
}

#



# JWT configuration
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# CORS & CSRF settings
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "https://issue-tracker-chi-swart.vercel.app",
    "https://issue-tracker-9auzl7ckm-kuldeeps-projects-d69e0562.vercel.app",
]
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    "https://issue-tracker-chi-swart.vercel.app",
    "https://issue-tracker-9auzl7ckm-kuldeeps-projects-d69e0562.vercel.app" 
]

AUTHENTICATION_BACKENDS = (#
    'django.contrib.auth.backends.ModelBackend',
    
)

# Google OAuth client configuration
GOOGLE_CLIENT_ID = config(
    'GOOGLE_CLIENT_ID',
    default='420584689357-tf8u7cqkqe6qdnim4rioo78mkveug4ri.apps.googleusercontent.com'
)
GOOGLE_CLIENT_SECRET = config('GOOGLE_CLIENT_SECRET', default='')

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': GOOGLE_CLIENT_ID,
            'secret': GOOGLE_CLIENT_SECRET,
            'key': ''
        }
    }
}

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
